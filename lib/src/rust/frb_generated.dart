// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart' if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';


                /// Main entrypoint of the Rust API
                class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
                  @internal
                  static final instance = RustLib._();

                  RustLib._();

                  /// Initialize flutter_rust_bridge
                  static Future<void> init({
                    RustLibApi? api,
                    BaseHandler? handler,
                    ExternalLibrary? externalLibrary,
                    bool forceSameCodegenVersion = true,
                  }) async {
                    await instance.initImpl(
                      api: api,
                      handler: handler,
                      externalLibrary: externalLibrary,
                      forceSameCodegenVersion: forceSameCodegenVersion,
                    );
                  }

                  /// Initialize flutter_rust_bridge in mock mode.
                  /// No libraries for FFI are loaded.
                  static void initMock({
                    required RustLibApi api,
                  }) {
                    instance.initMockImpl(
                      api: api,
                    );
                  }

                  /// Dispose flutter_rust_bridge
                  ///
                  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
                  /// is automatically disposed when the app stops.
                  static void dispose() => instance.disposeImpl();

                  @override
                  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor => RustLibApiImpl.new;

                  @override
                  WireConstructor<RustLibWire> get wireConstructor => RustLibWire.fromExternalLibrary;

                  @override
                  Future<void> executeRustInitializers() async {
                    
                  }

                  @override
                  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig => kDefaultExternalLibraryLoaderConfig;

                  @override
                  String get codegenVersion => '2.11.1';

                  @override
                  int get rustContentHash => -1314891286;

                  static const kDefaultExternalLibraryLoaderConfig = ExternalLibraryLoaderConfig(
                    stem: 'jiyi_native',
                    ioDirectory: 'rust/target/release/',
                    webPrefix: 'pkg/',
                  );
                }
                

                abstract class RustLibApi extends BaseApi {
                  Future<void> crateApiTokenOutputStreamClear({required TokenOutputStream that });

Future<String> crateApiTokenOutputStreamDecodeAll({required TokenOutputStream that });

Future<String?> crateApiTokenOutputStreamDecodeRest({required TokenOutputStream that });

Future<int?> crateApiTokenOutputStreamGetToken({required TokenOutputStream that , required String tokenS });

Future<Tokenizer> crateApiTokenOutputStreamIntoInner({required TokenOutputStream that });

Future<TokenOutputStream> crateApiTokenOutputStreamNew({required Tokenizer tokenizer });

Future<String?> crateApiTokenOutputStreamNextToken({required TokenOutputStream that , required int token });

Future<void> crateApiTokenOutputStreamTokenizer({required TokenOutputStream that });

String crateApiPrompt({required String root , required String system , required String prompt });

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_TokenOutputStream;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_TokenOutputStream;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TokenOutputStreamPtr;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Tokenizer;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Tokenizer;

CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TokenizerPtr;


                }
                

                class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
                  RustLibApiImpl({
                    required super.handler,
                    required super.wire,
                    required super.generalizedFrbRustBinding,
                    required super.portManager,
                  });

                  @override Future<void> crateApiTokenOutputStreamClear({required TokenOutputStream that })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(that, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        )
        ,
            constMeta: kCrateApiTokenOutputStreamClearConstMeta,
            argValues: [that],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiTokenOutputStreamClearConstMeta => const TaskConstMeta(
            debugName: "TokenOutputStream_clear",
            argNames: ["that"],
        );
        

@override Future<String> crateApiTokenOutputStreamDecodeAll({required TokenOutputStream that })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(that, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        )
        ,
            constMeta: kCrateApiTokenOutputStreamDecodeAllConstMeta,
            argValues: [that],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiTokenOutputStreamDecodeAllConstMeta => const TaskConstMeta(
            debugName: "TokenOutputStream_decode_all",
            argNames: ["that"],
        );
        

@override Future<String?> crateApiTokenOutputStreamDecodeRest({required TokenOutputStream that })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(that, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: sse_decode_AnyhowException,
        )
        ,
            constMeta: kCrateApiTokenOutputStreamDecodeRestConstMeta,
            argValues: [that],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiTokenOutputStreamDecodeRestConstMeta => const TaskConstMeta(
            debugName: "TokenOutputStream_decode_rest",
            argNames: ["that"],
        );
        

@override Future<int?> crateApiTokenOutputStreamGetToken({required TokenOutputStream that , required String tokenS })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(that, serializer);
sse_encode_String(tokenS, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_u_32,
          decodeErrorData: null,
        )
        ,
            constMeta: kCrateApiTokenOutputStreamGetTokenConstMeta,
            argValues: [that, tokenS],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiTokenOutputStreamGetTokenConstMeta => const TaskConstMeta(
            debugName: "TokenOutputStream_get_token",
            argNames: ["that", "tokenS"],
        );
        

@override Future<Tokenizer> crateApiTokenOutputStreamIntoInner({required TokenOutputStream that })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(that, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenizer,
          decodeErrorData: null,
        )
        ,
            constMeta: kCrateApiTokenOutputStreamIntoInnerConstMeta,
            argValues: [that],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiTokenOutputStreamIntoInnerConstMeta => const TaskConstMeta(
            debugName: "TokenOutputStream_into_inner",
            argNames: ["that"],
        );
        

@override Future<TokenOutputStream> crateApiTokenOutputStreamNew({required Tokenizer tokenizer })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenizer(tokenizer, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream,
          decodeErrorData: null,
        )
        ,
            constMeta: kCrateApiTokenOutputStreamNewConstMeta,
            argValues: [tokenizer],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiTokenOutputStreamNewConstMeta => const TaskConstMeta(
            debugName: "TokenOutputStream_new",
            argNames: ["tokenizer"],
        );
        

@override Future<String?> crateApiTokenOutputStreamNextToken({required TokenOutputStream that , required int token })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(that, serializer);
sse_encode_u_32(token, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 7, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: sse_decode_AnyhowException,
        )
        ,
            constMeta: kCrateApiTokenOutputStreamNextTokenConstMeta,
            argValues: [that, token],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiTokenOutputStreamNextTokenConstMeta => const TaskConstMeta(
            debugName: "TokenOutputStream_next_token",
            argNames: ["that", "token"],
        );
        

@override Future<void> crateApiTokenOutputStreamTokenizer({required TokenOutputStream that })  { return handler.executeNormal(NormalTask(
            callFfi: (port_) {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(that, serializer);
            pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 8, port: port_);
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        )
        ,
            constMeta: kCrateApiTokenOutputStreamTokenizerConstMeta,
            argValues: [that],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiTokenOutputStreamTokenizerConstMeta => const TaskConstMeta(
            debugName: "TokenOutputStream_tokenizer",
            argNames: ["that"],
        );
        

@override String crateApiPrompt({required String root , required String system , required String prompt })  { return handler.executeSync(SyncTask(
            callFfi: () {
              
            final serializer = SseSerializer(generalizedFrbRustBinding);sse_encode_String(root, serializer);
sse_encode_String(system, serializer);
sse_encode_String(prompt, serializer);
            return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
            
            },
            codec: 
        SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        )
        ,
            constMeta: kCrateApiPromptConstMeta,
            argValues: [root, system, prompt],
            apiImpl: this,
        )); }


        TaskConstMeta get kCrateApiPromptConstMeta => const TaskConstMeta(
            debugName: "prompt",
            argNames: ["root", "system", "prompt"],
        );
        

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_TokenOutputStream => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_TokenOutputStream => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream;

RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Tokenizer => wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenizer;

RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Tokenizer => wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenizer;



                  @protected AnyhowException dco_decode_AnyhowException(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return AnyhowException(raw as String); }

@protected TokenOutputStream dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return TokenOutputStreamImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected Tokenizer dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenizer(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return TokenizerImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected TokenOutputStream dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return TokenOutputStreamImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected TokenOutputStream dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return TokenOutputStreamImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected TokenOutputStream dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return TokenOutputStreamImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected Tokenizer dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenizer(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return TokenizerImpl.frbInternalDcoDecode(raw as List<dynamic>); }

@protected String dco_decode_String(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as String; }

@protected int dco_decode_box_autoadd_u_32(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as int; }

@protected Uint8List dco_decode_list_prim_u_8_strict(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as Uint8List; }

@protected String? dco_decode_opt_String(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw == null ? null : dco_decode_String(raw); }

@protected int? dco_decode_opt_box_autoadd_u_32(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw == null ? null : dco_decode_box_autoadd_u_32(raw); }

@protected int dco_decode_u_32(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as int; }

@protected int dco_decode_u_8(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return raw as int; }

@protected void dco_decode_unit(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return; }

@protected BigInt dco_decode_usize(dynamic raw){ // Codec=Dco (DartCObject based), see doc to use other codecs
return dcoDecodeU64(raw); }

@protected AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_String(deserializer);
        return AnyhowException(inner); }

@protected TokenOutputStream sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return TokenOutputStreamImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected Tokenizer sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenizer(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return TokenizerImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected TokenOutputStream sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return TokenOutputStreamImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected TokenOutputStream sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return TokenOutputStreamImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected TokenOutputStream sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return TokenOutputStreamImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected Tokenizer sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenizer(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return TokenizerImpl.frbInternalSseDecode(sse_decode_usize(deserializer), sse_decode_i_32(deserializer)); }

@protected String sse_decode_String(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var inner = sse_decode_list_prim_u_8_strict(deserializer);
        return utf8.decoder.convert(inner); }

@protected int sse_decode_box_autoadd_u_32(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return (sse_decode_u_32(deserializer)); }

@protected Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
var len_ = sse_decode_i_32(deserializer);
                return deserializer.buffer.getUint8List(len_); }

@protected String? sse_decode_opt_String(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs

            if (sse_decode_bool(deserializer)) {
                return (sse_decode_String(deserializer));
            } else {
                return null;
            }
             }

@protected int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs

            if (sse_decode_bool(deserializer)) {
                return (sse_decode_box_autoadd_u_32(deserializer));
            } else {
                return null;
            }
             }

@protected int sse_decode_u_32(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getUint32(); }

@protected int sse_decode_u_8(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getUint8(); }

@protected void sse_decode_unit(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
 }

@protected BigInt sse_decode_usize(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getBigUint64(); }

@protected int sse_decode_i_32(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getInt32(); }

@protected bool sse_decode_bool(SseDeserializer deserializer){ // Codec=Sse (Serialization based), see doc to use other codecs
return deserializer.buffer.getUint8() != 0; }

@protected void sse_encode_AnyhowException(AnyhowException self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_String(self.message, serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(TokenOutputStream self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as TokenOutputStreamImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenizer(Tokenizer self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as TokenizerImpl).frbInternalSseEncode(move: true), serializer); }

@protected void sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(TokenOutputStream self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as TokenOutputStreamImpl).frbInternalSseEncode(move: false), serializer); }

@protected void sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(TokenOutputStream self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as TokenOutputStreamImpl).frbInternalSseEncode(move: false), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenOutputStream(TokenOutputStream self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as TokenOutputStreamImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTokenizer(Tokenizer self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_usize((self as TokenizerImpl).frbInternalSseEncode(move: null), serializer); }

@protected void sse_encode_String(String self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer); }

@protected void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_u_32(self, serializer); }

@protected void sse_encode_list_prim_u_8_strict(Uint8List self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
sse_encode_i_32(self.length, serializer);
                    serializer.buffer.putUint8List(self); }

@protected void sse_encode_opt_String(String? self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs

                sse_encode_bool(self != null, serializer);
                if (self != null) {
                    sse_encode_String(self, serializer);
                }
                 }

@protected void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs

                sse_encode_bool(self != null, serializer);
                if (self != null) {
                    sse_encode_box_autoadd_u_32(self, serializer);
                }
                 }

@protected void sse_encode_u_32(int self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putUint32(self); }

@protected void sse_encode_u_8(int self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putUint8(self); }

@protected void sse_encode_unit(void self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
 }

@protected void sse_encode_usize(BigInt self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putBigUint64(self); }

@protected void sse_encode_i_32(int self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putInt32(self); }

@protected void sse_encode_bool(bool self, SseSerializer serializer){ // Codec=Sse (Serialization based), see doc to use other codecs
serializer.buffer.putUint8(self ? 1 : 0); }
                }
                

            @sealed class TokenOutputStreamImpl extends RustOpaque implements TokenOutputStream {
                // Not to be used by end users
                TokenOutputStreamImpl.frbInternalDcoDecode(List<dynamic> wire):
                    super.frbInternalDcoDecode(wire, _kStaticData);

                // Not to be used by end users
                TokenOutputStreamImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative):
                    super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

                static final _kStaticData = RustArcStaticData(
                    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_TokenOutputStream,
                    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_TokenOutputStream,
                    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_TokenOutputStreamPtr,
                );

                 Future<void>  clear()=>RustLib.instance.api.crateApiTokenOutputStreamClear(that: this, );


 Future<String>  decodeAll()=>RustLib.instance.api.crateApiTokenOutputStreamDecodeAll(that: this, );


 Future<String?>  decodeRest()=>RustLib.instance.api.crateApiTokenOutputStreamDecodeRest(that: this, );


 Future<int?>  getToken({required String tokenS })=>RustLib.instance.api.crateApiTokenOutputStreamGetToken(that: this, tokenS: tokenS);


 Future<Tokenizer>  intoInner()=>RustLib.instance.api.crateApiTokenOutputStreamIntoInner(that: this, );


 Future<String?>  nextToken({required int token })=>RustLib.instance.api.crateApiTokenOutputStreamNextToken(that: this, token: token);


 Future<void>  tokenizer()=>RustLib.instance.api.crateApiTokenOutputStreamTokenizer(that: this, );


            }
            @sealed class TokenizerImpl extends RustOpaque implements Tokenizer {
                // Not to be used by end users
                TokenizerImpl.frbInternalDcoDecode(List<dynamic> wire):
                    super.frbInternalDcoDecode(wire, _kStaticData);

                // Not to be used by end users
                TokenizerImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative):
                    super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

                static final _kStaticData = RustArcStaticData(
                    rustArcIncrementStrongCount: RustLib.instance.api.rust_arc_increment_strong_count_Tokenizer,
                    rustArcDecrementStrongCount: RustLib.instance.api.rust_arc_decrement_strong_count_Tokenizer,
                    rustArcDecrementStrongCountPtr: RustLib.instance.api.rust_arc_decrement_strong_count_TokenizerPtr,
                );

                
            }